{"title":"黑马程序员ssm总结","uid":"420d80760a809005a67319349e243832","slug":"黑马程序员ssm总结","date":"2022-10-06T13:21:00.000Z","updated":"2022-10-06T14:04:02.168Z","comments":true,"path":"api/articles/黑马程序员ssm总结.json","keywords":null,"cover":[],"content":"<p>前言</p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>pdf+源码(大全),对应视频:<a href=\"https://www.bilibili.com/video/BV1VJ411X7xX?p=20&amp;vd_source=0e4ada3d15f80172cb72c52e0fcabd05\">https://www.bilibili.com/video/BV1VJ411X7xX?p=20&amp;vd_source=0e4ada3d15f80172cb72c52e0fcabd05</a><br>自我感觉黑马课程比官方文档好,新手友好,强推!<br>看文档必看视频效率高,理解更透,一遍看不懂,反复看!<br><a href=\"https://download.csdn.net/download/tiexiaorenyu/85807718\">黑马程序员ssm资料(从spring–&gt;springmvc–&gt;springboot–&gt;maven高级-&gt;cloud微服务)</a></p></blockquote>\n<p>@[toc]</p>\n<p>耦合性可以是低耦合性（或称为松散耦合），也可以是高耦合性（或称为紧密耦合）。以下列出一些耦合性的分类，从高到低依序排列：</p>\n<ul>\n<li>内容耦合（content coupling，耦合度最高）：也称为病态耦合（pathological coupling）当一个模块直接使用另一个模块的内部数据，或通过非正常入口而转入另一个模块内部。</li>\n<li>共用耦合&#x2F;公共耦合（common coupling）：也称为全局耦合（global coupling.）指通过一个公共数据环境相互作用的那些模块间的耦合。公共耦合的复杂程序随耦合模块的个数增加而增加。</li>\n<li>外部耦合（external coupling）：发生在二个模块共用一个外加的数据格式、通信协议或是设备界面，基本上和模块和外部工具及设备的沟通有关。</li>\n<li>控制耦合（control coupling）：指一个模块调用另一个模块时，传递的是控制变量（如开关、标志等），被调模块通过该控制变量的值有选择地执行块内某一功能;</li>\n<li>特征耦合&#x2F;标记耦合（stamp coupling）：也称为数据结构耦合，是指几个模块共享一个复杂的数据结构，如高级语言中的数组名、记录名、文件名等这些名字即标记，其实传递的是这个数据结构的地址;</li>\n<li>数据耦合&#x2F;数据耦合（data coupling）：是指模块借由传入值共享数据，每一个数据都是最基本的数据，而且只分享这些数据（例如传递一个整数给计算平方根的函数）。</li>\n<li>消息耦合（message coupling，是无耦合之外，耦合度最低的耦合）：可以借由以下二个方式达成：状态的去中心化（例如在对象中），组件间利用传入值或消息传递 (计算机科学)来通信。</li>\n<li>无耦合：模块完全不和其他模块交换信息。</li>\n</ul>\n<p><strong>降低耦合度的方法</strong> </p>\n<p>　　1、少使用类的继承，多用接口隐藏实现的细节。 java面向对象编程引入接口除了支持多态外， 隐藏实现细节也是其中一个目的。<br>　　2、模块的功能化分尽可能的单一，道理也很简单，功能单一的模块供其它模块调用的机会就少。（其实这是高内聚的一种说法，高内聚低耦合一般同时出现，为了限制篇幅，我们将在以后的版期中讨论）。<br>　　3、遵循一个定义只在一个地方出现。<br>　　4、少使用全局变量。<br>　　5、类属性和方法的声明少用public，多用private关键字，<br>　　6、多用设计模式，比如采用MVC的设计模式就可以降低界面与业务逻辑的耦合度。<br>　　7、尽量不用“硬编码”的方式写程序，同时也尽量避免直接用SQL语句操作数据库。<br>　　8、最后当然就是避免直接操作或调用其它模块或类（内容耦合）；如果模块间必须存在耦合，原则上尽量使用数据耦合，少用控制耦合，限制公共耦合的范围，避免使用内容耦合。</p>\n<p>紧密耦合的系统在开发阶段有以下的缺点：</p>\n<ol>\n<li>一个模块的修改会产生<a href=\"https://baike.baidu.com/item/%E6%B6%9F%E6%BC%AA%E6%95%88%E5%BA%94\">涟漪效应</a>，其他模块也需随之修改。</li>\n<li>由于模块之间的相依性，模块的组合会需要更多的精力及时间。</li>\n<li>由于一个模块有许多的相依模块，模块的<a href=\"https://baike.baidu.com/item/%E5%8F%AF%E5%A4%8D%E7%94%A8%E6%80%A7\">可复用性</a>低。 [2]</li>\n</ol>\n<hr>\n<h1 id=\"spring核心容器\"><a href=\"#spring核心容器\" class=\"headerlink\" title=\"spring核心容器\"></a>spring核心容器</h1><blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>本章是core&amp;bean的原理讲解</p></blockquote>\n<p><a href=\"https://www.bilibili.com/video/BV1Fi4y1S7ix?p=200\">5min复习视频:核心容器总结</a></p>\n<p><img src=\"https://img-blog.csdnimg.cn/80aeb171eb054019870637914e4cd644.png\" alt=\"在这里插入图片描述\"></p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>Spring就提出了一个解决方案:</p>\n<ul>\n<li>使用对象时，在程序中不要主动使用new产生对象，转换为由&#x3D;&#x3D;外部&#x3D;&#x3D;提供对象</li>\n<li>即:使用消息耦合(耦合度最低的耦合),去中心化,</li>\n</ul></blockquote>\n<ol>\n<li>&#x3D;&#x3D;IOC（Inversion of Control）控制反转&#x3D;&#x3D;</li>\n</ol>\n<p>(1)什么是控制反转呢？</p>\n<ul>\n<li>使用对象时，由主动new产生对象转换为由&#x3D;&#x3D;外部&#x3D;&#x3D;提供对象，此过程中对象创建控制权由程序转移到外部，此思想称为控制反转。</li>\n</ul>\n<p>2.DI的注入方法</p>\n<ul>\n<li><p>setter注入(比构造器注入更常用,推荐,我们一般只用构造器注入)&lt;property&gt;(又分为</p>\n<ul>\n<li><p>引用类型注入&lt;property name&#x3D;”bookDao” ref&#x3D;”bookDao”&gt;)</p>\n</li>\n<li><p>简单类型(int…String)注入&lt;property name&#x3D;”msg” ref&#x3D;”我的类型是自动检测的,看要被注入的变量的类型”&gt;)</p>\n</li>\n<li><p>集合类型注入</p>\n<pre class=\"line-numbers language-markup\" data-language=\"markup\"><code class=\"language-markup\">&lt;property name&#x3D;&quot;names&quot;&gt;\n    &lt;list&gt;\n        &lt;value&gt;xxx&lt;&#x2F;value&gt;\n        &lt;ref bean&#x3D;&quot;dataSource&quot;&#x2F;&gt;\n    &lt;list&gt;\n&lt;&#x2F;property&gt;</code></pre></li>\n</ul>\n</li>\n<li><p>构造器注入&lt;constructor-arg&gt;</p>\n</li>\n</ul>\n<p>IoC基础上,需要绑定两个Bean之间的依赖关系,需要DI进行绑定,&lt;property&gt;的形式</p>\n<p>3.bean的生命周期scope: &lt;bean id&#x3D;”bookDao” class&#x3D;”com.itheima.dao.impl.BookDaoImpl” init-method&#x3D;”init” destroy-method&#x3D;”destory”&#x2F; …&gt;当然,还有很多别的scope生命周期属性</p>\n<p><img src=\"https://img-blog.csdnimg.cn/823dbb29afe049a1911842f597383809.png\" alt=\"在这里插入图片描述\"></p>\n<hr>\n<h1 id=\"spring注解开发-正片开始\"><a href=\"#spring注解开发-正片开始\" class=\"headerlink\" title=\"spring注解开发(正片开始)\"></a>spring注解开发(正片开始)</h1><p>spring3.0升级了</p>\n<p>纯注释开发,使用一个添加了 @configuration的config配置类来进行配置</p>\n<p><a href=\"https://www.bilibili.com/video/BV1Fi4y1S7ix?p=27&vd_source=0e4ada3d15f80172cb72c52e0fcabd05\">spring注解开发总结</a></p>\n<ul>\n<li><p>普通配置类注入:<img src=\"https://img-blog.csdnimg.cn/b11cdc5fd5f3406fb666a9cc2e0f3373.png\" alt=\"在这里插入图片描述\"></p>\n</li>\n<li><p>第三方配置类注入</p>\n</li>\n</ul>\n<p><img src=\"https://img-blog.csdnimg.cn/bc53e327f9474ab4b6923ae9adc9975f.png\" alt=\"在这里插入图片描述\"></p>\n<p><img src=\"https://img-blog.csdnimg.cn/7e09f0a74f7e43eda1a6992c9b282331.png\" alt=\"在这里插入图片描述\"></p>\n<hr>\n<h1 id=\"spring整合mybatis\"><a href=\"#spring整合mybatis\" class=\"headerlink\" title=\"spring整合mybatis\"></a>spring整合mybatis</h1><p><a href=\"https://www.bilibili.com/video/BV1Fi4y1S7ix?p=29&vd_source=0e4ada3d15f80172cb72c52e0fcabd05\">看看就行</a></p>\n<p>可以看到,在老师给的项目中,shiro( shiro是<a href=\"https://so.csdn.net/so/search?q=apache&spm=1001.2101.3001.7020\">apache</a>的是一个分布式权限管理的框架，实现 用户认证、用户授权)</p>\n<p>和 cors(用于允许跨域请求)</p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>出于安全原因，浏览器禁止AJAX调用当前来源之外的资源，跨域资源共享（CORS）是由大多数浏览器实施的W3C规范，使您可以灵活地指定对哪种跨域请求进行授权。<br>从Spring Framework 4.2开始，开箱即用地支持CORS。 CORS请求（包括带有OPTIONS方法的预检请求）将自动分派到各种已注册的HandlerMappings。</p></blockquote>\n<p>二者采取了类似的配置类形式</p>\n<h1 id=\"spring整合Junit\"><a href=\"#spring整合Junit\" class=\"headerlink\" title=\"spring整合Junit\"></a>spring整合Junit</h1><p><a href=\"https://www.bilibili.com/video/BV1Fi4y1S7ix?p=30&vd_source=0e4ada3d15f80172cb72c52e0fcabd05\">看看就行</a></p>\n<p><img src=\"https://img-blog.csdnimg.cn/0a8403d041454b4d833c9deee2bb9639.png\" alt=\"在这里插入图片描述\"></p>\n<hr>\n<h1 id=\"AOP-用于不改变原代码基础上-进行功能增强\"><a href=\"#AOP-用于不改变原代码基础上-进行功能增强\" class=\"headerlink\" title=\"AOP:用于不改变原代码基础上 进行功能增强\"></a>AOP:用于不改变原代码基础上 进行功能增强</h1><ul>\n<li>概念：AOP(Aspect Oriented Programming)面向切面编程，一种编程范式</li>\n<li>作用：在不惊动原始设计的基础上为方法进行功能&#x3D;&#x3D;增强&#x3D;&#x3D;</li>\n<li>核心概念<ul>\n<li>代理（Proxy）：SpringAOP的核心本质是采用代理模式实现的</li>\n<li>连接点（JoinPoint）：在SpringAOP中，理解为任意方法的执行</li>\n<li>切入点（Pointcut）：匹配连接点的式子，也是具有共性功能的方法描述</li>\n<li>通知（Advice）：若干个方法的共性功能，在切入点处执行，最终体现为一个方法</li>\n<li>切面（Aspect）：描述通知与切入点的对应关系</li>\n<li>目标对象（Target）：被代理的原始对象成为目标对象</li>\n</ul>\n</li>\n</ul>\n<p><strong>切入点表达式</strong>:</p>\n<ul>\n<li><p>切入点表达式标准格式：动作关键字(访问修饰符  返回值  包名.类&#x2F;接口名.方法名（参数）异常名)</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">execution(* com.itheima.service.*Service.*(..))</code></pre>\n</li>\n<li><p>切入点表达式描述通配符：</p>\n<ul>\n<li>作用：用于快速描述，范围描述</li>\n<li><code>*</code>：匹配任意符号（常用）</li>\n<li><code>..</code> ：匹配多个连续的任意符号（常用）</li>\n<li><code>+</code>：匹配子类类型</li>\n</ul>\n</li>\n<li><p>切入点表达式书写技巧</p>\n<p>1.按&#x3D;&#x3D;标准规范&#x3D;&#x3D;开发<br>2.查询操作的返回值建议使用*匹配<br>3.减少使用..的形式描述包<br>4.&#x3D;&#x3D;对接口进行描述&#x3D;&#x3D;，使用*表示模块名，例如UserService的匹配描述为*Service<br>5.方法名书写保留动词，例如get，使用*表示名词，例如getById匹配描述为getBy*<br>6.参数根据实际情况灵活调整</p>\n</li>\n</ul>\n<hr>\n<h1 id=\"Spring事务\"><a href=\"#Spring事务\" class=\"headerlink\" title=\"Spring事务\"></a>Spring事务</h1><ul>\n<li>保障一系列的数据库操作同成功同失败</li>\n<li>Spring事务作用：在数据层或**&#x3D;&#x3D;业务层&#x3D;&#x3D;**保障一系列的数据库操作同成功同失败</li>\n<li>Spring为了管理事务，提供了一个平台事务管理器<code>PlatformTransactionManager</code>:</li>\n</ul>\n<p><img src=\"https://img-blog.csdnimg.cn/189fbca58a2243dc90088974af694c8e.png\" alt=\"在这里插入图片描述\"></p>\n<p>进行提交与回滚,事务(转账操作中:A钱-,B钱+)作为一个整体,一旦部分执行不成功,能够整个回滚,从而确保若:A-成功,B+失败后,A,B都将回滚,恢复原状态</p>\n<p><img src=\"https://img-blog.csdnimg.cn/40c01ccfc2764a429ded1cba26b3b7a3.png\" alt=\"在这里插入图片描述\"></p>\n<p><img src=\"https://img-blog.csdnimg.cn/4e578cc26bb9454f9ac16819a2ca15ef.png\" alt=\"在这里插入图片描述\"></p>\n<p>(springboot中,连SpringMvcConfig都没了,使用,@EnableWebMvc也不会用了)</p>\n<p>REST风格(只是一种风格,不是一种规范,可以不遵守,但由于采用的人多,已经接近于一种规范):</p>\n<p><img src=\"https://img-blog.csdnimg.cn/55da200b073a48ca93b1c6192b75d219.png\" alt=\"在这里插入图片描述\"></p>\n<p>Restful风格:基于Rest风格,进一步简化:</p>\n<p>@ResponseBody</p>\n<p>@RestController</p>\n<p>@RequestMapping</p>\n<p><img src=\"https://img-blog.csdnimg.cn/1d3494af77c94792b6ddc9aed0b2f18b.png\" alt=\"在这里插入图片描述\"></p>\n<p>PostMan请求管理规范:</p>\n<p><img src=\"https://img-blog.csdnimg.cn/2cb7d8f4c49046aa9184eb2126b217a0.png\" alt=\"在这里插入图片描述\"></p>\n<p>使用Restful风格进行开发的一个示例:</p>\n<p><img src=\"https://img-blog.csdnimg.cn/7dd7729557e642dd8c8eb545a89a79bf.png\" alt=\"在这里插入图片描述\"></p>\n<p>如果直接访问前端界面:localhost&#x2F;pages&#x2F;books.html,报错:</p>\n<p><img src=\"https://img-blog.csdnimg.cn/05e72c657ebb420b98c9a9c74e884545.png\" alt=\"在这里插入图片描述\"></p>\n<p>浏览器:</p>\n<p>因:浏览器访问使用get方法,由spring处理,spring认为你没有这一接口.确实,它本来也不是接口,而是一个页面.</p>\n<p>法:spring放行,让tomcat处理；即：实现一个<strong>过滤器</strong>（filter）静态页面，tomcat直接处理，动态请求springMVC处理</p>\n<p><strong>拦截器</strong>：</p>\n<p><img src=\"https://img-blog.csdnimg.cn/9362e6ec53374f6db1502e96baa6fb5f.png\" alt=\"在这里插入图片描述\"></p>\n<p>拦截器（Intercepter）是一种动态拦截方法调用的机制，在springMVC中动态拦截 控制器 方法的执行</p>\n<ul>\n<li>在指定方法的前后执行预先设定的代码</li>\n<li>阻止原始方法的执行</li>\n</ul>\n<p>拦截器与过滤器的区别：</p>\n<ul>\n<li>filter属于<strong>servlet</strong>技术，intercepter属于<strong>SpringMVC</strong>技术</li>\n<li>filter对所有访问进行增强，intercepter仅对SpringMVC的访问进行增强</li>\n</ul>\n<hr>\n<h1 id=\"Maven分模块开发：\"><a href=\"#Maven分模块开发：\" class=\"headerlink\" title=\"Maven分模块开发：\"></a>Maven分模块开发：</h1><p>idea的maven相关功能只能确保书写的时候不报错，不能保证运行的时候不报错</p>\n<p>通过install，实现本地安装</p>\n<p>pom项目默认的打包方式:&lt;packaging&gt;jar&lt;&#x2F;packaging&gt;</p>\n<p>pom项目web项目的打包方式:&lt;packaging&gt;war&lt;&#x2F;packaging&gt;</p>\n<p>pom项目聚合项目的打包方式:&lt;packaging&gt;pom&lt;&#x2F;packaging&gt;</p>\n<ul>\n<li>maven冲突:</li>\n</ul>\n<p><img src=\"https://img-blog.csdnimg.cn/203ba1df08d14f4490170df497479aa1.png\" alt=\"在这里插入图片描述\"></p>\n<p>发生冲突时,maven会有一些规则来选用依赖</p>\n<p>依赖冲突可能会导致某个依赖使用了你不想使用的版本(这个版本可能会导致运行错误)</p>\n<ul>\n<li><p>可选依赖和排除依赖</p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><pre><code>&lt;!--可选依赖是隐藏当前工程所依赖的资源，隐藏后对应资源将不具有依赖传递--&gt;\n&lt;optional&gt;true&lt;/optional&gt;\n</code></pre></blockquote>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><pre><code>&lt;!--排除依赖是隐藏当前资源对应的依赖关系--&gt;\n&lt;exclusions&gt;\n    &lt;exclusion&gt;\n        &lt;groupId&gt;com.itheima&lt;/groupId&gt;\n        &lt;artifactId&gt;maven_03_pojo&lt;/artifactId&gt;\n    &lt;/exclusion&gt;\n&lt;/exclusions&gt;\n</code></pre></blockquote>\n</li>\n<li><p>maven多环境开发:(profile)</p>\n</li>\n</ul>\n<p><img src=\"https://img-blog.csdnimg.cn/6fc88f58c2c44eb2b56e15f8dda86cc9.png\" alt=\"在这里插入图片描述\"></p>\n<p>pro,dev,test多环境不同,如何配置多环境开发,以供选用?</p>\n<ul>\n<li><p>使用聚合统一管理项目</p>\n<p>步骤1:创建一个空的maven项目</p>\n<p>步骤2:将项目的打包方式改为pom</p>\n<p>步骤3:pom.xml添加所要管理的项目</p>\n<p>步骤4:使用聚合统一管理项目</p>\n<pre class=\"line-numbers language-markup\" data-language=\"markup\"><code class=\"language-markup\">&lt;?xml version&#x3D;&quot;1.0&quot; encoding&#x3D;&quot;UTF-8&quot;?&gt;\n&lt;project xmlns&#x3D;&quot;http:&#x2F;&#x2F;maven.apache.org&#x2F;POM&#x2F;4.0.0&quot;\n         xmlns:xsi&#x3D;&quot;http:&#x2F;&#x2F;www.w3.org&#x2F;2001&#x2F;XMLSchema-instance&quot;\n         xsi:schemaLocation&#x3D;&quot;http:&#x2F;&#x2F;maven.apache.org&#x2F;POM&#x2F;4.0.0 http:&#x2F;&#x2F;maven.apache.org&#x2F;xsd&#x2F;maven-4.0.0.xsd&quot;&gt;\n    &lt;modelVersion&gt;4.0.0&lt;&#x2F;modelVersion&gt;\n\n    &lt;groupId&gt;com.itheima&lt;&#x2F;groupId&gt;\n    &lt;artifactId&gt;maven_01_parent&lt;&#x2F;artifactId&gt;\n    &lt;version&gt;1.0-RELEASE&lt;&#x2F;version&gt;\n    &lt;packaging&gt;pom&lt;&#x2F;packaging&gt;\n    \n    &lt;!--设置管理的模块名称--&gt;\n    &lt;modules&gt;\n        &lt;module&gt;..&#x2F;maven_02_ssm&lt;&#x2F;module&gt;\n        &lt;module&gt;..&#x2F;maven_03_pojo&lt;&#x2F;module&gt;\n        &lt;module&gt;..&#x2F;maven_04_dao&lt;&#x2F;module&gt;\n    &lt;&#x2F;modules&gt;\n&lt;&#x2F;project&gt;</code></pre>\n</li>\n<li><p>继承:解决重复配置问题</p>\n</li>\n</ul>\n<pre class=\"line-numbers language-markup\" data-language=\"markup\"><code class=\"language-markup\">&lt;!--配置当前工程继承自parent工程--&gt;\n&lt;parent&gt;\n    &lt;groupId&gt;com.itheima&lt;&#x2F;groupId&gt;\n    &lt;artifactId&gt;maven_01_parent&lt;&#x2F;artifactId&gt;\n    &lt;version&gt;1.0-RELEASE&lt;&#x2F;version&gt;\n    &lt;!--设置父项目pom.xml位置路径--&gt;\n    &lt;relativePath&gt;..&#x2F;maven_01_parent&#x2F;pom.xml&lt;&#x2F;relativePath&gt;\n&lt;&#x2F;parent&gt;</code></pre>\n\n\n\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>&#x3D;&#x3D;<code>&lt;dependencyManagement&gt;</code>标签不真正引入jar包，而是配置可供子项目选择的jar包依赖&#x3D;&#x3D;</p>\n<p>子项目要想使用它所提供的这些jar包，需要自己添加依赖，并且不需要指定<code>&lt;version&gt;</code></p></blockquote>\n<ul>\n<li><p>属性:即在pom.xml中配置属性变量,更改一处时,其他地方跟着更改</p>\n<p>定义:</p>\n<pre class=\"line-numbers language-markup\" data-language=\"markup\"><code class=\"language-markup\">&lt;!--定义属性--&gt;\n&lt;properties&gt;\n    &lt;spring.version&gt;5.2.10.RELEASE&lt;&#x2F;spring.version&gt;\n    &lt;junit.version&gt;4.12&lt;&#x2F;junit.version&gt;\n    &lt;mybatis-spring.version&gt;1.3.0&lt;&#x2F;mybatis-spring.version&gt;\n&lt;&#x2F;properties&gt;</code></pre>\n\n<p>使用:</p>\n<pre class=\"line-numbers language-markup\" data-language=\"markup\"><code class=\"language-markup\">&lt;dependency&gt;\n    &lt;groupId&gt;org.springframework&lt;&#x2F;groupId&gt;\n    &lt;artifactId&gt;spring-jdbc&lt;&#x2F;artifactId&gt;\n    &lt;version&gt;$&#123;spring.version&#125;&lt;&#x2F;version&gt;\n&lt;&#x2F;dependency&gt;</code></pre>\n\n<p><strong>文件加载 属性</strong>:配置文件(如jdbc.properties文件)中的属性，也让Maven进行管理</p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>需要设置maven过滤文件范围</p>\n<p>详见 maven高级.md</p></blockquote>\n</li>\n<li><p>私服</p>\n</li>\n</ul>\n<p>使用nexus能建立私服仓库(小团队开发):nexus server端建立私服仓库–&gt;本地maven setting.xml完成私服地址配置(至此,能访问私服了)–&gt;项目pom.xml,添加 &lt;distributionManagement&gt; 配置当前工程保存(部署)在私服中的具体位置–&gt;maven deploy指令部署</p>\n<p>(下载不需要部署)</p>\n<hr>\n<h1 id=\"springboot\"><a href=\"#springboot\" class=\"headerlink\" title=\"springboot\"></a>springboot</h1><p>(前期都是基础,了解原理;springboot开始进入实用)</p>\n<p>一个经典Controller处理前端请求:</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">@RestController\n@RequestMapping(&quot;&#x2F;books&quot;)\npublic class BookController &#123;\n\n    @GetMapping(&quot;&#x2F;&#123;id&#125;&quot;)\n    public String getById(@PathVariable Integer id)&#123;\n        System.out.println(&quot;id &#x3D;&#x3D;&gt; &quot;+id);\n        return &quot;hello , spring boot!&quot;;\n    &#125;\n&#125;</code></pre>\n\n\n\n<p> <code>SpringBoot</code> 程序如何修改呢？<code>SpringBoot</code> 提供了多种属性配置方式,加载顺序由上往下,因而如下三文件,最终:server:port:82</p>\n<p>今后统一使用application.yml</p>\n<ul>\n<li><p><code>application.properties</code></p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">server.port&#x3D;80</code></pre>\n</li>\n<li><p><code>application.yml</code></p>\n<pre class=\"line-numbers language-yaml\" data-language=\"yaml\"><code class=\"language-yaml\">server:\n\tport: 81</code></pre>\n</li>\n<li><p><code>application.yaml</code></p>\n<pre class=\"line-numbers language-yaml\" data-language=\"yaml\"><code class=\"language-yaml\">server:\n\tport: 82</code></pre></li>\n</ul>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>&#x3D;&#x3D;注意：<code>SpringBoot</code> 程序的配置文件名必须是 <code>application</code> ，只是后缀名不同而已。&#x3D;&#x3D;</p></blockquote>\n<hr>\n<ul>\n<li>mybatis</li>\n</ul>\n<p>mybatis-plus真的能省很多力,但老师已经用了mybatis了,那算了!</p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>mybatis也有了<strong>自动代码生成器</strong>(毕竟国外uu们不使用mp(mybatis-plus),用不到这么好的代码生成器[笑]),老师就用了,参照:</p>\n<p><a href=\"https://blog.csdn.net/qq_41973208/article/details/106685861\">MyBatis代码自动生成器Mybatis-Generator使用教程</a></p>\n<p>核心:</p>\n<p>1.<strong>mybatis-generator.xml</strong>文件(文章中为<strong>mybatis-generator-cfg.xml</strong>,老师项目中为:<strong>mybatis-generator.xml</strong>)</p>\n<p>2.<strong>pom里面添加mybatis-generator的plugin配置。加载plugins</strong></p>\n<p>3.<strong>添加运行配置、运行文件（对了记得吧application.properties后缀改为yml</strong></p>\n<blockquote>\n<p>3是为了使用maven运行maven插件 mybatis-generator:generate -e指令</p></blockquote>\n<p><code>注意</code>:不需要担心  自写mapper(xml文件)代码被覆盖, 高于mybatis1.3.7的版本都不会覆盖 ,参见<a href=\"https://blog.csdn.net/web13985085406/article/details/124126068\">自写mapper(xml文件)代码被覆盖</a></p>\n</blockquote>\n<p>必须尽快弄好,或者想别的方法让单老师先开始!</p>\n<ol>\n<li>新建springboot+mybatis项目(pom)(此时pom插件已经配好)</li>\n<li>新建bean,entity,dao–&gt;mapper自动生成–&gt;controller(老师为了实现登录,使用了一些别的插件)</li>\n<li>不需要配置跨域请求(来自不同端口的请求)(没有使用vue,vue是动态应用,而我们目前页面是static!请求来自同一端口!)</li>\n<li>过程中,application.yml文件配置(项目配置,mysql配置,mybatis的数据源),mybatis-generator文件配置</li>\n<li>不断添加插件,不断添加pom.xml</li>\n</ol>\n<p><img src=\"https://img-blog.csdnimg.cn/24f6c26fb69a4703ab1bb7edc374d4e2.png\" alt=\"在这里插入图片描述\"></p>\n<p>(都在mybatis-generator.xml中配置完成,且生成连带实体类!!!)</p>\n<hr>\n<p><a href=\"https://blog.csdn.net/weixin_51781586/article/details/111471205\">Unknown system variable ‘query_cache_size‘ 的解决方法</a> 方法二亲测有效!</p>\n<p>当前,需要解决映射不成功的问题(mybatis理解不深!),以箭头为 映射成功的标志</p>\n<ol>\n<li><p>了解mybatis映射机制,正常来说,不需要mybatis-generator.xml也能生成箭头(视箭头为映射成功的标志)</p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>尝试,更改mybatis-generator.xml的dao目录(覆盖也没关系!)</p>\n<p>依旧没问题</p>\n<p>映射机制:</p>\n<p>1.引入mybatis依赖(pom.xml)</p>\n<p>2.property.yml文件,配置mybatis映射关系(如果)</p>\n<ol start=\"3\">\n<li></li>\n</ol></blockquote>\n</li>\n<li><p>使用mybatis-generator.xml生成的都有箭头</p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>必然不是spring配置错误,而是mybatis理解不深刻!</p>\n<p>尝试:删除某一文件,重配!</p>\n<p>依旧没问题</p></blockquote>\n</li>\n</ol>\n<p>批量注入过程中,发现@Repository改为使用@Mapper注入成功了!</p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>[外链图片转存失败,源站可能有防盗链机制,建议将图片保存下来直接上传(img-xBg2o0NB-1656345257363)(SSM(含springboot)]+Maven高级+Mybatis.assets&#x2F;image-20220626155525255.png)</p></blockquote>\n<p>o.s.s.s.TaskUtils$LoggingErrorHandler    : Unexpected error occurred in scheduled task.</p>\n<p>java.lang.NoClassDefFoundError: com&#x2F;alibaba&#x2F;fastjson&#x2F;util&#x2F;IdentityHashMap</p>\n<p><a href=\"https://blog.csdn.net/qgnczmnmn/article/details/118050472\">Maven中的scope总结</a></p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><ol>\n<li><p><strong>compile</strong><br>不声明scope元素的情况下的<strong>默认值</strong>；compile表示被依赖包需要参与当前项目的编译，包括后续的测试，运行周期也参与其中，是一个比较强的依赖；打包的时候通常需要包含进去。</p>\n<p>…..</p>\n</li>\n<li><p><strong>runtime</strong><br><code>runtime</code>与<code>compile</code>比较相似，区别在于<code>runtime</code> 跳过了<code>编译</code>阶段，打包的时候通常需要包含进去。</p>\n<p>…..</p>\n</li>\n<li><p><strong>import</strong><br>import 只能在pom文件的<dependencyManagement>中使用，从而引入其他的pom文件中引入依赖，如：在Spring boot 项目的POM文件中，我们可以通过在POM文件中继承 Spring-boot-starter-parent来引用Srping boot默认依赖的jar包</p>\n<p>….</p>\n</li>\n</ol>\n<p>因而,也难怪,之前依赖使用import出现了不生效的情况!</p></blockquote>\n<p><img src=\"https://img-blog.csdnimg.cn/798a317f70434eb0bf743f54a7e56033.png\" alt=\"在这里插入图片描述\"></p>\n<hr>\n<p>分析:</p>\n<p>当前版本:较为合理,pom中的依赖是,结合:老师原项目+nacos-discover示例项目得到的(虽说去除了哥的那几个依赖,这是我最担心的!如果出现相关报错,将删除哥的文件)</p>\n<ul>\n<li><p>fastjson找不到:</p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>依赖冲突:</p>\n<p>当前fastjson版本无问题!2.1依然足矣!</p>\n<p>搜:</p>\n<p>1.<strong>External Libraries</strong>中并未发现相关依赖的Jar包–&gt;有,非</p>\n<ol start=\"2\">\n<li></li>\n</ol></blockquote>\n</li>\n<li><p>必然是某些配置错误,因此,进行了配置文件置零操作,与老师当初保持一致(现下所处阶段:不如张俊杰当初,但他引入了大量不靠谱依赖,我这靠谱)</p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><ul>\n<li>spring-boot-starter-web 版本 不一致,有风险!(低于)</li>\n<li></li>\n</ul></blockquote>\n</li>\n</ul>\n<hr>\n<h1 id=\"nacos配置中心（cloud-alibaba）\"><a href=\"#nacos配置中心（cloud-alibaba）\" class=\"headerlink\" title=\"nacos配置中心（cloud-alibaba）\"></a>nacos配置中心（cloud-alibaba）</h1><p><img src=\"https://img-blog.csdnimg.cn/c849a84d12f6494299bcb9af6e334d7f.png\" alt=\" \"></p>\n<p><strong>配置管理的必要性:</strong></p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>同一份程序在不同的环境（开发，测试，生产）、不同的集群（如不同的数据中心）经常需要有不同的 </p>\n<p>配置，所以需要有完善的环境、集群配置管理</p>\n<p>在微服务架构中，当系统从一个单体应用，被拆分成分布式系统上一个个<strong>服务节点</strong>后，配置文件也必须跟着迁移 </p>\n<p>（分割），这样配置就分散了，不仅如此，<strong>分散中还包含着冗余</strong>，如下图：</p>\n<p>[外链图片转存失败,源站可能有防盗链机制,建议将图片保存下来直接上传(img-Lp7d1a0R-1656345257365)(SSM(含springboot)]+Maven高级+Mybatis.assets&#x2F;image-20220627173947910.png)</p>\n<p>配置中心的服务流程如下： </p>\n<p>1、用户在配置中心更新配置信息。 </p>\n<p>2、服务A和服务B及时得到配置更新通知，从配置中心获取配置。 </p>\n<p><strong>总得来说，配置中心就是一种统一管理各种应用配置的基础服务组件。</strong> </p>\n<p>在系统架构中，配置中心是整个微服务基础架构体系中的一个组件，如下图，它的功能看上去<strong>并不起眼，无非就是</strong> </p>\n<p><strong>配置的管理和存取，但它是整个微服务架构中不可或缺的一环</strong>。 </p>\n<p>总而言之，在传统巨型单体应用纷纷转向<strong>细粒度微服务架构</strong>的历史进程中，配置中心是微服务化<strong>不可缺少</strong>的一个系 </p>\n<p>统组件，在这种背景下中心化的配置服务即配置中心应运而生</p>\n<p>通过配置中心,我们实现了:</p>\n<ul>\n<li>合格的配置中心需要满足如下特性： </li>\n<li>配置项容易读取和修改 </li>\n<li>分布式环境下应用配置的可管理性，即提供远程管理配置的能力 </li>\n<li>支持对配置的修改的检视以把控风险 </li>\n<li>可以查看配置修改的历史记录 </li>\n<li>不同部署环境下应用配置的隔离性</li>\n</ul>\n<p>[外链图片转存失败,源站可能有防盗链机制,建议将图片保存下来直接上传(img-4f1Y4G9C-1656345257366)(SSM(含springboot)]+Maven高级+Mybatis.assets&#x2F;image-20220627173914565.png)</p>\n<blockquote>\n<p>问:nacos配置中心的配置是动态的,我们的微服务已经跑起来后,是如何派上用场的?懂了,只是集中管理,但是需要:重新跑!\t</p>\n<p>示例服务中,配置只是进行打印,如何 将配置派上用场?</p>\n<blockquote>\n<p>一般来说，spring boot的配置将在application.yml(也可以是application.properties)文件中编写， </p>\n<p>由于使用外部 配置中心，必须将原先的application.yml重命名为bootstrap.yml，bootstrap.yml如下所示： </p>\n<p>spring.cloud.nacos.confifig.server-addr 指定了Nacos Server的网络地址和端口号</p>\n<p>[外链图片转存失败,源站可能有防盗链机制,建议将图片保存下来直接上传(img-uMr6Bfog-1656345257367)(SSM(含springboot)]+Maven高级+Mybatis.assets&#x2F;image-20220627174121228.png)</p>\n<p>如此,外部(nacos)配置中心派上了用场</p></blockquote>\n</blockquote>\n<p>通过<strong>自定义扩展的 Data Id 配置</strong>，既可以解决多个应用间配置共享的问题，<strong>又可以支持一个应用有多个配置文件</strong></p>\n</blockquote>\n<p>结论:实现简单,后期可以整,暂时没必要!!!</p>\n<hr>\n<h1 id=\"nacos服务发现\"><a href=\"#nacos服务发现\" class=\"headerlink\" title=\"nacos服务发现\"></a>nacos服务发现</h1><blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>笔记摘自:黑马程序员 nacos-服务发现.pdf</p></blockquote>\n<h2 id=\"负载均衡-引入-服务发现的目的\"><a href=\"#负载均衡-引入-服务发现的目的\" class=\"headerlink\" title=\"负载均衡,引入 服务发现的目的\"></a>负载均衡,引入 服务发现的目的</h2><p>先导: <strong>Spring Cloud</strong>服务协作流程:</p>\n<p>[外链图片转存失败,源站可能有防盗链机制,建议将图片保存下来直接上传(img-E4rTyo5f-1656345257368)(SSM(含springboot)]+Maven高级+Mybatis.assets&#x2F;image-20220627183219988.png)</p>\n<p>（1）在微服务启动时，会向服务发现中心上报自身实例信息，这里ServiceB 包含多个实例。 </p>\n<p>每个实例包括：</p>\n<p>IP地址、端口号信息。</p>\n<p>北京市昌平区建材城西路金燕龙办公楼一层 电话：400-618-9090（2）微服务会定期从Nacos Server(服务发现中心)获取服务实例列表。 </p>\n<p>（3）当ServiceA调用ServiceB时，ribbon组件从本地服务实例列表中查找ServiceB的实例，如获取了多个实例如 </p>\n<p>Instance1、Instance2。这时ribbon会通过用户所配置的<strong>负载均衡策略</strong>从中选择一个实例。 </p>\n<p>（4）最终，Feign组件会通过ribbon选取的实例发送http请求。 </p>\n<p>采用Feign+Ribbon的整合方式，是由Feign完成远程调用的整个流程。而Feign集成了Ribbon，Feign使用Ribbon </p>\n<p>完成调用实例的负载均衡。 </p>\n<p><strong>考察核心</strong>:光凭zuul网关配置,能否实现负载均衡?(而非在 service微服务互相调用过程中,通过feign实现!)</p>\n<p>(负载均衡的两个环节:1.通过feign(调用ribbon组件)微服务直接互相调用(<strong>客户端负载均衡</strong>,微服务是nacos客户端  nacos server是服务端)   2.通过zuul 网关配置,端口转发(服务端负载均衡,通过nginx实现的一样是<strong>服务端负载均衡</strong>;zuul和nginx往往是一起使用的!)  )</p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>ribbon根据负载均衡策略负责选择示例,feign会通过ribbon来选择实例进而发送请求(feign集成来ribbon)</p></blockquote>\n<p>(本文档,似乎一直在集中阐述 客户端负载均衡!)</p>\n<hr>\n<h2 id=\"没有nacos服务注册中心时-微服务调用\"><a href=\"#没有nacos服务注册中心时-微服务调用\" class=\"headerlink\" title=\"没有nacos服务注册中心时,微服务调用\"></a>没有nacos服务注册中心时,微服务调用</h2><blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>在微服务架构中,<strong>如果没有nacos服务注册中心</strong>,如何进行<strong>微服务之间互相调用</strong>(通信)?</p></blockquote>\n<p>Service B暴露接口供Service A调用:</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">@SpringBootApplication \n@RestController \npublic class SpringRestProviderBootstrap &#123; \n    public static void main(String[] args) &#123; \n        SpringApplication.run(SpringRestProviderBootstrap.class, args); \n    &#125;\n    \n@GetMapping(value &#x3D; &quot;&#x2F;service&quot;) &#x2F;&#x2F;暴露服务 \npublic String service()&#123; \n    return &quot;provider invoke&quot;; \n&#125; \n&#125;</code></pre>\n\n\n\n<p>配置文件:</p>\n<pre class=\"line-numbers language-yaml\" data-language=\"yaml\"><code class=\"language-yaml\">server.port &#x3D; 56010</code></pre>\n\n\n\n<p>Service A去调用Service B</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">@SpringBootApplication \n@RestController \npublic class SpringRestConsumerBootstrap \n&#123; public static void main(String[] args) &#123;\n    SpringApplication.run(SpringRestConsumerBootstrap.class, args); \n&#125;\n \n@Value(&quot;$&#123;provider.address&#125;&quot;) \nprivate String providerAddress; \n \n@GetMapping(value &#x3D; &quot;&#x2F;service&quot;) \npublic String service()&#123; \n    RestTemplate restTemplate &#x3D; new RestTemplate(); &#x2F;&#x2F;调用服务 \n    String providerResult &#x3D; restTemplate.getForObject(&quot;http:&#x2F;&#x2F;&quot; + providerAddress + \t\t\t\t   &quot;&#x2F;service&quot;,String.class); return &quot;consumer invoke | &quot; + providerResult; \n&#125; \n&#125;</code></pre>\n\n\n\n<p><a href=\"https://blog.csdn.net/jinjiniao1/article/details/100849237\">RestTemplate工具类,spring提供的一个HTTP请求工具</a></p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>在服务的调用过程中，使用到了一个工具，叫做 RestTemplate，RestTemplate 是由 Spring 提供的一个 HTTP 请求工具。在上文的案例中，开发者也可以不使用 RestTemplate ，使用 Java 自带的 HttpUrlConnection 或者经典的网络访问框架 HttpClient 也可以完成上文的案例，只是在 Spring 项目中，使用 RestTemplate 显然更方便一些。在传统的项目架构中，因为不涉及到服务之间的调用，大家对 RestTemplate 的使用可能比较少</p></blockquote>\n<p>总结:</p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>关键: application.yml中配置provider.address属性,拼凑出地址后,使用restTemplate.getForObject方法进行调用!</p>\n<p>但是,微服务可能是部署在云环境的，服务实例的网络位置或许是动态分配的。另外，每一个服务一般会有多个实 </p>\n<p>例来做负载均衡，由于宕机或升级，服务<strong>实例网络地址</strong>会经常<strong>动态改变</strong>。再者，每一个服务也可能应对<strong>临时访问压</strong> </p>\n<p><strong>力增加新的服务节点</strong>。正如下图所示:</p>\n<p>[外链图片转存失败,源站可能有防盗链机制,建议将图片保存下来直接上传(img-pK72PVE8-1656345257369)(SSM(含springboot)]+Maven高级+Mybatis.assets&#x2F;image-20220627192149824.png)</p></blockquote>\n<hr>\n<h2 id=\"nacos服务注册的实现\"><a href=\"#nacos服务注册的实现\" class=\"headerlink\" title=\"nacos服务注册的实现\"></a>nacos服务注册的实现</h2><p><code>(服务发现(让服务之间互相感知)与管理问题)</code></p>\n<p>[外链图片转存失败,源站可能有防盗链机制,建议将图片保存下来直接上传(img-9PJda5TR-1656345257369)(SSM(含springboot)]+Maven高级+Mybatis.assets&#x2F;image-20220627192235974.png)</p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>（1）在每个服务启动时会向<strong>服务发现中心</strong>上报自己的网络位置。这样，在服务发现中心内部会形成一个<strong>服务注册</strong> </p>\n<p><strong>表</strong>，<strong>服务注册表</strong>是服务发现的核心部分，是包含所有服务实例的网络地址的数据库。 </p>\n<p>（2）<strong>服务发现客户端</strong>会定期从<strong>服务发现中心</strong>同步<strong>服务注册表</strong> ，并缓存在客户端。 </p>\n<p>（3）当需要对某服务进行请求时，服务实例通过该注册表，定位目标服务网络地址。若目标服务存在多个网络地 </p>\n<p>址，则使用负载均衡算法从多个服务实例中选择出一个，然后发出请求。 </p>\n<p>总结一下，在微服务环境中，由于服务运行实例的网络地址是不断动态变化的，服务实例数量的动态变化 ，因此无 </p>\n<p>法使用固定的配置文件来记录服务提供方的网络地址，必须使用动态的服务发现机制用于实现微服务间的<strong>相互感</strong> </p>\n<p><strong>知</strong>。各服务实例会上报自己的网络地址，这样服务中心就形成了一个完整的服务注册表，各服务实例会通过<strong>服务发</strong> </p>\n<p><strong>现中心</strong>来获取访问目标服务的网络地址，从而实现<strong>服务发现</strong>的机制。</p></blockquote>\n<p>服务注册的实现<strong>极其简单</strong>:</p>\n<p>(下面这个例子是从 海马程序员-服务发现中,摘出来的部分代码,像@EnableFeignClients如果仅为实现服务注册而不实现feign调用其他微服务,那它是多余的)</p>\n<p>(为了更深刻理解,看源文档  <a href=\"\">nacos-服务发现.pdf</a> (文档视频中有,我的博客中也有) or <a href=\"https://www.bilibili.com/video/BV1VJ411X7xX?p=20&vd_source=0e4ada3d15f80172cb72c52e0fcabd05\">黑马nacos-服务发现 视频</a>)</p>\n<ol>\n<li><p>application.yml配置 </p>\n<pre class=\"line-numbers language-yaml\" data-language=\"yaml\"><code class=\"language-yaml\">server: \n\tport: 56020 #启动端口 命令行注入 \n\t\nspring: \n\tapplication: \n\t\tname: quickstart‐consumer \n\tcloud: \n\t\tnacos: \n\t\t\tdiscovery: \n\t\t\t\tserver‐addr: 127.0.0.1:8848</code></pre>\n\n<p>2.Provider(生产者)远程代理定义</p>\n</li>\n</ol>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">@SpringBootApplication \n@EnableDiscoveryClient \n@EnableFeignClients #开启FeignClient,如果只是实现服务注册,不使用feign调用其他微服务的话,就没必要了\npublic class NacosConsumerApp &#123; \n    public static void main(String[] args) &#123; \n        SpringApplication.run(NacosConsumerApp.class, args); \n    &#125; \n&#125;</code></pre>\n\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>Note: <strong>@EnableDiscoveryClient</strong> 在spring cloud项目中表明此项目是一个<strong>注册发现客户端</strong>，这里注册服务发 </p>\n<p>现使用的是Nacos </p>\n<p>Note: @EnableFeignClients 开启FeignClient</p></blockquote>\n<p>&#x3D;&#x3D;可以说,实现服务注册,只需要: <code>@EnableDiscoveryClient </code>就行!!!&#x3D;&#x3D;</p>\n<hr>\n<h2 id=\"有了nacos服务注册中心时-利用feign-ribbon-进行微服务调用\"><a href=\"#有了nacos服务注册中心时-利用feign-ribbon-进行微服务调用\" class=\"headerlink\" title=\"有了nacos服务注册中心时,利用feign(ribbon)进行微服务调用\"></a>有了nacos服务注册中心时,利用feign(ribbon)进行微服务调用</h2><p>spring(boot)使用feign需在pom.xml中加入依赖:</p>\n<pre class=\"line-numbers language-markup\" data-language=\"markup\"><code class=\"language-markup\">&lt;dependency&gt; \n\t&lt;groupId&gt;org.springframework.cloud&lt;&#x2F;groupId&gt; \n\t&lt;artifactId&gt;spring‐cloud‐starter‐openfeign&lt;&#x2F;artifactId&gt; \n&lt;&#x2F;dependency&gt;</code></pre>\n\n\n\n<p>参考前面 没有nacos服务注册中心时,微服务调用 的ServiceA调用ServiceB的例子，我们有了 在服务注册后 使用<strong>Feign</strong>实现这个过程，代码如下： </p>\n<p>Service B暴露”&#x2F;service”服务端点，如下：</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">@SpringBootApplication \n@RestController\npublic class SpringRestProviderBootstrap &#123; \n    public static void main(String[] args) \n    &#123; \n        SpringApplication.run(SpringRestProviderBootstrap.class, args); \n    &#125;\n@GetMapping(value &#x3D; &quot;&#x2F;service&quot;) \n\n&#x2F;&#x2F;暴露服务 \npublic String service()&#123; return &quot;provider invoke&quot;; &#125; &#125;</code></pre>\n\n\n\n<p>Service A中,通过Feign调用Service B方式如下： </p>\n<p>（1）声明Feign客户端 </p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">@FeignClient(value &#x3D; &quot;serviceB&quot;) \npublic interface ServiceBAgent &#123; \n\n    &#x2F;** \n    * 根据用户名查询账号信息 \n    * @param username 用户名 \n    * @return 账号信息 \n    *&#x2F; \n&#x2F;&#x2F;Feign英文表意为“假装，伪装，变形”，此处正是将HTTP报文请求方式 伪装为简单的java接口(内部,未通过TTTP)调用方式\n@GetMapping(value &#x3D; &quot;&#x2F;service&quot;) \npublic String service(); &#125;</code></pre>\n\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>Feign是Netflflix开发的声明式、模板化的HTTP客户端， Feign可以帮助我们更快捷、优雅地调用HTTP API。Feign </p>\n<p>的英文表意为“假装，伪装，变形”， 可以理解为将HTTP报文请求方式伪装为简单的java接口调用方式。</p></blockquote>\n<p>（2）业务调用</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">@Autowired \nprivate ServiceBAgent serviceBAgent.; \n&#x2F;&#x2F;....略 \nserviceBAgent.service();\n&#x2F;&#x2F;....略</code></pre>\n\n<ul>\n<li>在 声明Feign客户端 之后，Feign会根据**@FeignClient<strong>注解使用java的</strong>动态代理技术生成代理类**，在这里我们</li>\n</ul>\n<p>指定@FeignClient value为serviceB，则说明这个类的远程目标为spring cloud的服务名称为serviceB的微服 </p>\n<p>务。</p>\n<ul>\n<li><p>serviceB的具体访问地址，Feign会交由ribbon获取，若该服务有多个实例地址，<strong>ribbon</strong>会采用指定的<strong>负载均</strong> </p>\n<p><strong>衡策略选取实例</strong>。 (Feign默认<strong>集成了Ribbon</strong>，可以直接使用)</p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>可通过下面方式在spring boot 配置文件中修改默认的负载均衡策略： </p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">account‐service.ribbon.NFLoadBalancerRuleClassName&#x3D;com.netflix.loadbalancer.RandomRule</code></pre>\n\n<p>account-service 是调用的服务的名称，后面的组成部分是固定的。</p></blockquote>\n</li>\n<li><p>Feign兼容spring的web注解（如：@GetMapping），它会分析声明Feign客户端方法中的<strong>Spring注解</strong>，得出 </p>\n<p>Http请求method、参数信息以及返回信息结构。 </p>\n</li>\n<li><p>当业务调用Feign客户端方法时，会调用代理类，根据以上分析结果，由<strong>代理类完成实际的参数封装、远程</strong> </p>\n<p><strong>http请求，返回结果封装</strong>等操作。</p>\n</li>\n</ul>\n<hr>\n<ul>\n<li>综合架构演示:</li>\n</ul>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>由于Feign是基于Http Restful的调用，在高并发下的性能不够理想，我们将RPC方案从feign<strong>切换为Dubbo</strong>, 将<strong>Spring Cloud与阿里系的若干组件</strong>完美集成()</p></blockquote>\n<p><strong>系统架构图:</strong></p>\n<p>[外链图片转存失败,源站可能有防盗链机制,建议将图片保存下来直接上传(img-i5hEqqxd-1656345257370)(SSM(含springboot)]+Maven高级+Mybatis.assets&#x2F;image-20220627201408150.png)</p>\n<ul>\n<li><p>service-api的作用:</p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p> 优劣:</p>\n<p> 取舍:</p></blockquote>\n</li>\n<li><p>Service2配置(纯生产者):</p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span> <pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">package com.itheima.microservice.service2.service; \n@org.apache.dubbo.config.annotation.Service \npublic class ProviderServiceImpl implements ProviderService &#123; \n @Override \n public String service() &#123; \n     return &quot;Provider invoke&quot;; \n &#125; \n&#125;</code></pre>\n\n<p> 其中， @org.apache.dubbo.config.annotation.Service 是 <strong>Dubbo 服务注解</strong>，仅<strong>声明该 Java 服务（本地）实现</strong> </p>\n<p> <strong>为 Dubbo 服务</strong>。 因此，下一步需要将其配置 Dubbo 服务（远程）。</p>\n<p> <strong>配置</strong> <strong>Dubbo</strong> <strong>服务</strong> </p>\n<p> 在暴露 Dubbo 服务方面，推荐开发人员外部化配置的方式，即指定 Java 服务实现类的<strong>扫描基准包</strong>。</p>\n<p> Dubbo Spring Cloud 继承了 Dubbo Spring Boot 的外部化配置特性，也可以通过标注 @DubboComponentScan 来实现基准包扫描。 </p>\n<p> 同时，Dubbo 远程服务需要暴露网络端口，并设定通讯协议，完整的 YAML 配置如下所示:</p>\n <pre class=\"line-numbers language-yaml\" data-language=\"yaml\"><code class=\"language-yaml\">server: port: $&#123;port:56040&#125; #启动端口 命令行注入 \nspring: application: \n\tname: service2 \n\tmain: \n\t\tallow‐bean‐definition‐overriding: true # Spring Boot 2.1 需要设定 \n\tcloud: \n\t\tnacos: \n\t\t\tdiscovery: \n\t\t\t\tserver‐addr: 127.0.0.1:8848 \n\t\t\t\tnamespace: c67e4a97‐a698‐4d6d‐9bb1‐cfac5f5b51c4 \n\t\t\t\tcluster‐name: DEFAULT \n\t\t\tconfig: server‐addr: 127.0.0.1:8848 # 配置中心地址 \n\t\t\t\tfile‐extension: yaml \n\t\t\t\tnamespace: c67e4a97‐a698‐4d6d‐9bb1‐cfac5f5b51c4 # 开发环境 \n\t\t\t\tgroup: NACOS_MICROSERVICE_GROUP # xx业务组 \n\t\t\t\tdubbo: \n\t\t\t\t\tscan: # dubbo 服务扫描基准包 \n\t\t\t\t\tbase‐packages: com.itheima.microservice protocol: # dubbo 协议 \n\t\t\t\t\tname: dubbo # dubbo 协议端口（ ‐1 表示自增端口，从 20880 开始） \n\t\t\t\t\tport: $&#123;dubbo_port:20891&#125; \n\t\t\tregistry: \n\t\t\t\taddress: nacos:&#x2F;&#x2F;127.0.0.1:8848 \n\t\t\tapplication: \n\t\t\t\tqos‐enable: false \n\t\t\tconsumer: \n\t\t\t\tcheck: false</code></pre>\n\n<p> <strong>核心</strong>:</p>\n<p> 标注 @DubboComponentScan 来实现基准包扫描;Dubbo 远程服务需要暴露网络端口</p>\n<ul>\n<li><p>dubbo.scan.base-packages : <strong>指定 Dubbo 服务实现类的扫描基准包</strong>，将@org.apache.dubbo.confifig.annotation.Service<strong>注解标注的service暴露为dubbo服务</strong></p>\n</li>\n<li><p>dubbo.protocol : <strong>Dubbo 服务暴露的协议配置</strong>，其中子属性 name 为协议名称， port 为dubbo<strong>协议端口</strong> 可以指定多协议，如：dubbo.protocol.rmi.port&#x3D;1099 </p>\n</li>\n<li><p>dubbo.registry : <strong>Dubbo 服务注册中心配置</strong>，其中子属性 address 的值 “nacos:&#x2F;&#x2F;127.0.0.1:8848”，说明dubbo服务注册到nacos ,相当于原生dubbo的xml配置中的 &lt;dubbo:registry address&#x3D;”10.20.153.10:9090” &#x2F;&gt;</p>\n</li>\n</ul>\n<p> <strong>启动服务提供方应用</strong> </p>\n<p> Dubbo Spring Cloud 引导类与普通 Spring Cloud 应用并无差别，如下所示： </p>\n <pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">@SpringBootApplication \n@EnableDiscoveryClient \npublic class Service2Bootstrap &#123; \n\tpublic static void main(String[] args) &#123; \n       SpringApplication.run(Service2Bootstrap.class, args); \n   &#125;\n&#125;</code></pre></blockquote>\n</li>\n<li><p>Service1配置(生产者&amp;消费者):</p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>实现dubbo服务</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">package com.itheima.microservice.service1.service; \n@org.apache.dubbo.config.annotation.Service  \n&#x2F;&#x2F;能替换成 import org.apache.dubbo.config.annotation   @Service\npublic class ConsumerServiceImpl implements ConsumerService &#123; \n @Override\n public String service() &#123; \n     return &quot;Consumer invoke &quot; ; \n &#125; \n&#125;</code></pre>\n\n<p>使用@org.apache.dubbo.confifig.annotation.Service标记dubbo服务 </p>\n<p>bootstrap.yml配置文件与Service2一致</p>\n<p>pom.xml引入 spring-cloud-starter-dubbo依赖，它会根据接口生成代理对象</p>\n<pre class=\"line-numbers language-yaml\" data-language=\"yaml\"><code class=\"language-yaml\">&lt;dependency&gt; \n\t&lt;groupId&gt;com.alibaba.cloud&lt;&#x2F;groupId&gt; \n\t&lt;artifactId&gt;spring‐cloud‐starter‐dubbo&lt;&#x2F;artifactId&gt; \n&lt;&#x2F;dependency&gt;</code></pre>\n\n\n\n<p>实现Service1调用Service2</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">@org.apache.dubbo.config.annotation.Service \npublic class ConsumerServiceImpl implements ConsumerService &#123; \n @Reference \n ProviderService providerService; \n public String service() &#123; \n     return &quot;Consumer invoke | &quot;+providerService.service(); \n &#125; \n&#125;</code></pre>\n\n<p>关键:</p>\n<p>使用@Reference 注入 代理对象! (引入的dubbo依赖只在此处使用,<strong>引导类处不会</strong>像feign的使用一样<strong>有@EnableFeignClients注释</strong>)</p>\n<p>Dubbo Spring Cloud 引导类与普通 Spring Cloud 应用并无差别(<strong>引导类处不会</strong>像feign的使用一样<strong>有@EnableFeignClients注释</strong>)</p></blockquote>\n</li>\n<li><p>Application1配置:</p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>   实现 application1<strong>调用Service1</strong></p>\n   <pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">@RestController \npublic class Application1Controller &#123; \n @org.apache.dubbo.config.annotation.Reference \n private ConsumerService consumerService; \n\n @GetMapping(&quot;&#x2F;service&quot;) \n public String service()&#123; \n     return &quot;test&quot; + consumerService.service(); \n &#125; \n&#125;</code></pre>\n\n<p>   测试：  请求：<a href=\"http://localhost:56020/application1/service\">http://localhost:56020/application1/service</a>  </p>\n<p>   consumerService正常生成代理对象，service1被调用。 </p></blockquote>\n</li>\n<li><p>zuul配置:</p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p> 原来的单体架构，所有的服务都是本地的，<strong>UI可以直接调用</strong>，现在按功能拆分成独立的服务，跑在独立的一般都在 </p>\n<p> 独立的虚拟机上的 Java进程了。客户端UI如何访问？他的后台有N个服务，前台就需要记住管理N个服务，一个服 </p>\n<p> 务下线&#x2F;更新&#x2F;升级，前台就要重新部署，这明显不服务我们拆分的理念，特别当前台是移动应用的时候，通常业务 </p>\n<p> 变化的节奏更快。另外，N个小服务的调用也是一个不小的网络开销。</p>\n<p> [外链图片转存失败,源站可能有防盗链机制,建议将图片保存下来直接上传(img-VujOFLBE-1656345257371)(SSM(含springboot)]+Maven高级+Mybatis.assets&#x2F;image-20220627233329623.png)</p>\n<ul>\n<li><p>Zuul网关的作用:</p>\n</li>\n<li><p>提供统一服务入口，让微服务对前台透明 </p>\n</li>\n<li><p>聚合后台的服务，节省流量，提升性能 </p>\n</li>\n<li><p>提供安全，过滤，流控等API管理功能</p>\n</li>\n</ul>\n<blockquote>\n<p>Spring Cloud Zuul是整合Netflflix公司的Zuul开源项目实现的微服务网关，它实现了<strong>请求路由、负载均衡、校验过</strong> </p>\n<p><strong>虑</strong>等 功能。 </p></blockquote>\n<ul>\n<li>Zuul与Nginx怎么配合使用？</li>\n</ul>\n<p> Zuul与Nginx在实际项目中需要配合使用，如下图，Nginx的作用是反向代理、负载均衡，Zuul的作用是保障微服 </p>\n<p> 务的安全访问，拦截微服务请求，校验合法性及负载均衡。</p>\n<p>  [外链图片转存失败,源站可能有防盗链机制,建议将图片保存下来直接上传(img-hKW870pZ-1656345257372)(SSM(含springboot)]+Maven高级+Mybatis.assets&#x2F;image-20220627233539020.png)</p>\n<p> <strong>api-gateway</strong>配置</p>\n <pre class=\"line-numbers language-yaml\" data-language=\"yaml\"><code class=\"language-yaml\">server: \n\tport: 56010 #启动端口 命令行注入 \nspring: \n\tapplication: \n\t\tname: api‐gateway \n\tmain: \n\t\tallow‐bean‐definition‐overriding: true # Spring Boot 2.1 需要设定 \n\tcloud: \n\t\tnacos: \n\t\t\tdiscovery: \n\t\t\t\tserver‐addr: 127.0.0.1:8848 \n\t\t\t\tnamespace: c67e4a97‐a698‐4d6d‐9bb1‐cfac5f5b51c4 \n\t\t\t\tcluster‐name: DEFAULT \n\t\t\tconfig: \n\t\t\t\tserver‐addr: 127.0.0.1:8848 # 配置中心地址 \n\t\t\t\tfile‐extension: yaml \n\t\t\t\tnamespace: c67e4a97‐a698‐4d6d‐9bb1‐cfac5f5b51c4 # 开发环境 \n\t\t\t\tgroup: NACOS_MICROSERVICE_GROUP # xx业务组</code></pre>\n\n<p> 网关的<strong>路由配置</strong>采用nacos远程配置，在nacos控制台<strong>开发环境</strong>中新增api-gateway.yaml配置集，配置组为 </p>\n<p> TEST_GROUP，配置内容如下： </p>\n <pre class=\"line-numbers language-yaml\" data-language=\"yaml\"><code class=\"language-yaml\">zuul: \n\troutes: \n\t\tapplication1: \n\t\t\tstripPrefix: false \n\t\t\tpath: &#x2F;application1&#x2F;**</code></pre>\n\n<p> 将请求为 &#x2F;application1&#x2F; 开头的请求路由至 application1 服务，保留请求url中的 &#x2F;application1&#x2F; </p>\n<p> <strong>api-gateway</strong>启动:</p>\n<p> 注意在启动类上使用@EnableZuulProxy注解标识此工程为Zuul网关，启动类代码如下:</p>\n <pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">@SpringBootApplication \n@EnableDiscoveryClient \n@EnableZuulProxy \npublic class ApiGatewayBootstrap &#123; \n   public static void main(String[] args) &#123; \n       SpringApplication.run(ApiGatewayBootstrap.class, args); \n   &#125; \n&#125;</code></pre>\n\n<p> 浏览器访问: <a href=\"http://127.0.0.1:56010/application1/service\">http://127.0.0.1:56010/application1/service</a> (相当于UI 前端 get请求)</p>\n<p> 通过网关（api-gateway）请求Application1应用，Application1的业务实现又贯穿service1、service2</p>\n</blockquote>\n</li>\n</ul>\n<p>使用@org.apache.dubbo.confifig.annotation.Service标记dubbo服务</p>\n<hr>\n<p>杂记:</p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>浏览器中输入:</p>\n<p><a href=\"http://127.0.0.1:56020/service\">http://127.0.0.1:56020/service</a></p>\n<p>相当于前端发送get请求,请求地址(url)为:<a href=\"http://127.0.0.1:56020/service,%E5%8D%B3\">http://127.0.0.1:56020/service,即</a> 服务器:<a href=\"http://127.0.0.1/\">http://127.0.0.1</a> 端口:56020  的service后端接口</p>\n<p>但是,还是postman好用,能够发出post请求</p></blockquote>\n","text":"前言 pdf+源码(大全),对应视频:https://www.bilibili.com/video/BV1VJ411X7xX?p=20&amp;vd_source=0e4ada3d15f80172cb72c52e0fcabd05自我感觉黑马课程比官方文档好,新手友好,强推!看文档...","link":"","photos":[],"count_time":{"symbolsCount":"25k","symbolsTime":"22 mins."},"categories":[],"tags":[{"name":"ssm,spring,springboot","slug":"ssm-spring-springboot","count":1,"path":"api/tags/ssm-spring-springboot.json"},{"name":"maven","slug":"maven","count":1,"path":"api/tags/maven.json"},{"name":"mvc","slug":"mvc","count":1,"path":"api/tags/mvc.json"},{"name":"micro-service","slug":"micro-service","count":1,"path":"api/tags/micro-service.json"},{"name":"gateway","slug":"gateway","count":1,"path":"api/tags/gateway.json"},{"name":"zuul","slug":"zuul","count":1,"path":"api/tags/zuul.json"},{"name":"nacos,feign,ribbon","slug":"nacos-feign-ribbon","count":1,"path":"api/tags/nacos-feign-ribbon.json"},{"name":"dubbo","slug":"dubbo","count":1,"path":"api/tags/dubbo.json"},{"name":"Service Register","slug":"Service-Register","count":1,"path":"api/tags/Service-Register.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#spring%E6%A0%B8%E5%BF%83%E5%AE%B9%E5%99%A8\"><span class=\"toc-text\">spring核心容器</span></a></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#spring%E6%B3%A8%E8%A7%A3%E5%BC%80%E5%8F%91-%E6%AD%A3%E7%89%87%E5%BC%80%E5%A7%8B\"><span class=\"toc-text\">spring注解开发(正片开始)</span></a></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#spring%E6%95%B4%E5%90%88mybatis\"><span class=\"toc-text\">spring整合mybatis</span></a></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#spring%E6%95%B4%E5%90%88Junit\"><span class=\"toc-text\">spring整合Junit</span></a></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#AOP-%E7%94%A8%E4%BA%8E%E4%B8%8D%E6%94%B9%E5%8F%98%E5%8E%9F%E4%BB%A3%E7%A0%81%E5%9F%BA%E7%A1%80%E4%B8%8A-%E8%BF%9B%E8%A1%8C%E5%8A%9F%E8%83%BD%E5%A2%9E%E5%BC%BA\"><span class=\"toc-text\">AOP:用于不改变原代码基础上 进行功能增强</span></a></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#Spring%E4%BA%8B%E5%8A%A1\"><span class=\"toc-text\">Spring事务</span></a></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#Maven%E5%88%86%E6%A8%A1%E5%9D%97%E5%BC%80%E5%8F%91%EF%BC%9A\"><span class=\"toc-text\">Maven分模块开发：</span></a></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#springboot\"><span class=\"toc-text\">springboot</span></a></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#nacos%E9%85%8D%E7%BD%AE%E4%B8%AD%E5%BF%83%EF%BC%88cloud-alibaba%EF%BC%89\"><span class=\"toc-text\">nacos配置中心（cloud-alibaba）</span></a></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#nacos%E6%9C%8D%E5%8A%A1%E5%8F%91%E7%8E%B0\"><span class=\"toc-text\">nacos服务发现</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E8%B4%9F%E8%BD%BD%E5%9D%87%E8%A1%A1-%E5%BC%95%E5%85%A5-%E6%9C%8D%E5%8A%A1%E5%8F%91%E7%8E%B0%E7%9A%84%E7%9B%AE%E7%9A%84\"><span class=\"toc-text\">负载均衡,引入 服务发现的目的</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E6%B2%A1%E6%9C%89nacos%E6%9C%8D%E5%8A%A1%E6%B3%A8%E5%86%8C%E4%B8%AD%E5%BF%83%E6%97%B6-%E5%BE%AE%E6%9C%8D%E5%8A%A1%E8%B0%83%E7%94%A8\"><span class=\"toc-text\">没有nacos服务注册中心时,微服务调用</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#nacos%E6%9C%8D%E5%8A%A1%E6%B3%A8%E5%86%8C%E7%9A%84%E5%AE%9E%E7%8E%B0\"><span class=\"toc-text\">nacos服务注册的实现</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E6%9C%89%E4%BA%86nacos%E6%9C%8D%E5%8A%A1%E6%B3%A8%E5%86%8C%E4%B8%AD%E5%BF%83%E6%97%B6-%E5%88%A9%E7%94%A8feign-ribbon-%E8%BF%9B%E8%A1%8C%E5%BE%AE%E6%9C%8D%E5%8A%A1%E8%B0%83%E7%94%A8\"><span class=\"toc-text\">有了nacos服务注册中心时,利用feign(ribbon)进行微服务调用</span></a></li></ol></li></ol>","author":{"name":"Statck","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"","socials":{"github":"https://github.com/StackChan","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"https://blog.csdn.net/tiexiaorenyu","juejin":"","customs":{}}},"mapped":true,"prev_post":{"title":"数据科学基础(MATLAB)-Note","uid":"372a48f036f8637b5f6e53362512ed58","slug":"数据科学基础-MATLAB-Note","date":"2022-10-06T13:54:25.000Z","updated":"2022-10-06T14:04:10.947Z","comments":true,"path":"api/articles/数据科学基础-MATLAB-Note.json","keywords":null,"cover":[],"text":"(本地用typora写的md笔记,导入图片得建一个picGo图床,嫌麻烦,所以如有需要带完整图片的笔记,参见:课件,参见:东北大学数据科学基础MATLAB学习PPT.zip) @[toc] 一. 零散知识 MATLAB用于编程,Typora提纲,Latex再编排(关于排版问题,g...","link":"","photos":[],"count_time":{"symbolsCount":"51k","symbolsTime":"46 mins."},"categories":[],"tags":[{"name":"MATLAB","slug":"MATLAB","count":1,"path":"api/tags/MATLAB.json"},{"name":"Machine Learing Basis","slug":"Machine-Learing-Basis","count":1,"path":"api/tags/Machine-Learing-Basis.json"},{"name":"data mining","slug":"data-mining","count":1,"path":"api/tags/data-mining.json"}],"author":{"name":"Statck","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"","socials":{"github":"https://github.com/StackChan","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"https://blog.csdn.net/tiexiaorenyu","juejin":"","customs":{}}},"feature":true},"next_post":{}}